---
- name: Install/Upgrade
  hosts: gws hubs
  gather_facts: yes
  vars:
    STATE_PATH: /data_vol/sonar-dsf/jsonar
    LAST_INSTALLATION_SOURCE: '{{ STATE_PATH }}/last_install_source.txt'
    INSTALL_DIR: /opt/sonar-dsf/
  tasks:
  # Prerequisits
    - name: Upgrade all packages
      yum: name=* state=latest lock_timeout=180
      become: true
    - name: Install python3
      yum: name=python3 state=latest lock_timeout=180
      become: true
    - name: Install boto python package
      ansible.builtin.pip:
        name: boto3
        extra_args: --user
      vars:
        ansible_python_interpreter: /usr/bin/python3
    - name: Wait for disk attachment
      wait_for:
        timeout: 600
        sleep: 5
        path: '{{ STATE_PATH }}'
    - name: Lookup existing installation
      shell: '[ -f {{ LAST_INSTALLATION_SOURCE }} ] && cat {{ LAST_INSTALLATION_SOURCE }} || echo "NA"'
      register: exisiting_version
      changed_when: false
    - name: Print existing vesion
      debug:
        var: exisiting_version.stdout
    - block:
      - name: Download installation tarball
        aws_s3:
          bucket: "{{ tarball_s3_bucket }}"
          object: "{{ tarball_s3_key }}"
          dest: "{{ tarball_s3_key | basename }}"
          mode: get
        vars:
          ansible_python_interpreter: /usr/bin/python3
        become: false
      - name: Create installation directory
        file:
          path: "{{ INSTALL_DIR }}"
          state: directory
          mode: '0770'
        # TBD: Use module rather than shell
      - name: Unarchive tarball
        shell: tar -xf  "{{ tarball_s3_key | basename }}" -gz -C "{{ INSTALL_DIR }}"
        # ansible.builtin.unarchive:
        #   src: "{{ tarball_s3_key | basename }}"
        #   dest: "{{ INSTALL_DIR }}"
        #   remote_src: yes 
      - name: Set installation user owner
        file:
          path: "{{ INSTALL_DIR }}"
          state: directory
          recurse: yes
          owner: sonarw
          group: sonar
        # TBD: Get version from somewhere else
      - name: Extract new version
        shell: ls /opt/sonar-dsf/jsonar/apps/ -Art | tail -1
        register: new_version
        changed_when: false
      - name: Print new version
        debug:
          var: new_version.stdout
      - name: Install
        shell: |
          /opt/sonar-dsf/jsonar/apps/{{ new_version.stdout }}/bin/sonarg-setup --no-interactive \
          --accept-eula \
          --jsonar-uid-display-name {{ installation_param_display_name }} \
          --product "imperva-data-security" \
          --newadmin-pass={{ installation_param_password }} \
          --secadmin-pass={{ installation_param_password }} \
          --sonarg-pass={{ installation_param_password }} \
          --sonargd-pass={{ installation_param_password }} \
          --jsonar-datadir={{ STATE_PATH }}/data \
          --jsonar-localdir={{ STATE_PATH }}/local \
          --jsonar-logdir={{ STATE_PATH }}/logs \
          $(test {{ sonar_installation_type }} == "gw" && echo "--remote-machine")
      - name: Set environment variables
        copy:
            dest: "/etc/profile.d/jsonar.sh"
            mode: '0744'
            content: |
              source /etc/sysconfig/jsonar
              export JSONAR_BASEDIR
              export JSONAR_DATADIR
              export JSONAR_LOGDIR
              export JSONAR_LOCALDIR
              export JSONAR_VERSION
      - name: Set last installation source
        copy:
          dest: "{{ LAST_INSTALLATION_SOURCE }}"
          content: |
            s3://{{ tarball_s3_bucket }}/{{ tarball_s3_key }}
      - name: Remove installation tarball
        file:
          path: "{{ tarball_s3_key | basename }}"
          state: absent
      become: true
      when: exisiting_version.stdout != ["s3://", tarball_s3_bucket, "/", tarball_s3_key]|join('')
      
    - block: # Installing keys on hub
      - name: Create sonarw .ssh directory
        file:
          path: "/home/sonarw/.ssh"
          state: directory
          mode: '0700'
      - name: lookup sonarw secretsmanager secret
        shell: "/usr/local/bin/aws secretsmanager get-secret-value --secret-id {{ sonarw_secret_name }} --query SecretString --output text"
        register: sonarw_secret
        changed_when: false
      - name: Set sonarw id_rsa
        copy:
          dest: "/home/sonarw/.ssh/id_rsa"
          mode: '0600'
          content: "{{ sonarw_secret.stdout }}"
        no_log: true
      - name: Set sonarw id_rsa.pub
        copy:
          dest: "/home/sonarw/.ssh/id_rsa.pub"
          mode: '0600'
          content: "{{ sonarw_public_key }}"
      become: true
      when: sonar_installation_type == "hub"
    - block: # Installing hub keys on all nodes
      - name: Create sonarw .ssh directory
        file:
          path: "/home/sonarw/.ssh"
          state: directory
          mode: '0700'
      - name: Touch sonarw authorized_keys
        file:
          path: "/home/sonarw/.ssh/authorized_keys"
          state: touch
          mode: '0600'
          owner: sonarw
          group: sonar
        changed_when: false # TBD - fix this
      - name: Put sonarw public key in authorized_keys
        lineinfile:
          path: "/home/sonarw/.ssh/authorized_keys"
          create: no
          insertafter: EOF
          line: "{{ sonarw_public_key }}"
          regexp: "produced-by-terraform"
      - name: set .ssh permisions recursively
        file:
          path: "/home/sonarw/.ssh"
          state: directory
          recurse: yes
          mode: '0600'
          owner: sonarw
          group: sonar
      - name: set .ssh directory permisions 
        file:
          path: "/home/sonarw/.ssh"
          state: directory
          mode: '0700'
          owner: sonarw
          group: sonar
      become: true